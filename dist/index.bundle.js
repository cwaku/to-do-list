(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"body {\n  background-color: #fff;\n}\n\n.container {\n  margin: 10% 25% 0 25%;\n  padding: 20px 0;\n  box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n  -webkit-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n}\n\n.contain {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #c9bebeab;\n  padding-bottom: 5px;\n}\n\n.iconed,\n.sub-icon {\n  padding-right: 10px;\n  cursor: pointer;\n}\n\n.sub-icon:hover {\n  font-size: 20px;\n  color: aqua;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #c9bebeab;\n}\n\n.input {\n  width: 100%;\n}\n\np {\n  outline: none;\n}\n\n.text {\n  border: 0;\n  text-transform: inherit;\n  font-style: italic;\n  padding: 16px 10px;\n  padding-bottom: 16px;\n  width: 100%;\n  outline: none;\n}\n\n.list {\n  padding: 0;\n}\n\nul li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2%;\n  border-bottom: 1px solid #c9bebeab;\n}\n\n.strike {\n  text-decoration: line-through;\n  color: #746d6d;\n}\n\n.task {\n  display: flex;\n  align-items: center;\n}\n\n.list button {\n  border: 0;\n  background-color: #fff;\n  margin: 16px;\n  font-size: 16px;\n  color: #746d6d;\n}\n\n.icon-d {\n  padding-right: 5px;\n}\n\n.icon-d:hover {\n  color: red;\n  font-size: 20px;\n}\n\n.icons {\n  color: #746d6d;\n}\n\n.icons:hover {\n  cursor: move;\n  color: #000;\n  font-size: 20px;\n}\n\n.clear-all {\n  border: none;\n  background-color: #fff;\n  width: 100%;\n  font-size: 15px;\n  margin-bottom: 10px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,6CAA6C;EAC7C,qDAAqD;EACrD,kDAAkD;AACpD;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,kCAAkC;EAClC,mBAAmB;AACrB;;AAEA;;EAEE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,oBAAoB;EACpB,kCAAkC;AACpC;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,SAAS;EACT,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;EACX,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,kCAAkC;AACpC;;AAEA;EACE,6BAA6B;EAC7B,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,SAAS;EACT,sBAAsB;EACtB,YAAY;EACZ,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,eAAe;EACf,mBAAmB;AACrB",sourcesContent:["body {\n  background-color: #fff;\n}\n\n.container {\n  margin: 10% 25% 0 25%;\n  padding: 20px 0;\n  box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n  -webkit-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\n}\n\n.contain {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #c9bebeab;\n  padding-bottom: 5px;\n}\n\n.iconed,\n.sub-icon {\n  padding-right: 10px;\n  cursor: pointer;\n}\n\n.sub-icon:hover {\n  font-size: 20px;\n  color: aqua;\n}\n\n.heading {\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #c9bebeab;\n}\n\n.input {\n  width: 100%;\n}\n\np {\n  outline: none;\n}\n\n.text {\n  border: 0;\n  text-transform: inherit;\n  font-style: italic;\n  padding: 16px 10px;\n  padding-bottom: 16px;\n  width: 100%;\n  outline: none;\n}\n\n.list {\n  padding: 0;\n}\n\nul li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2%;\n  border-bottom: 1px solid #c9bebeab;\n}\n\n.strike {\n  text-decoration: line-through;\n  color: #746d6d;\n}\n\n.task {\n  display: flex;\n  align-items: center;\n}\n\n.list button {\n  border: 0;\n  background-color: #fff;\n  margin: 16px;\n  font-size: 16px;\n  color: #746d6d;\n}\n\n.icon-d {\n  padding-right: 5px;\n}\n\n.icon-d:hover {\n  color: red;\n  font-size: 20px;\n}\n\n.icons {\n  color: #746d6d;\n}\n\n.icons:hover {\n  cursor: move;\n  color: #000;\n  font-size: 20px;\n}\n\n.clear-all {\n  border: none;\n  background-color: #fff;\n  width: 100%;\n  font-size: 15px;\n  margin-bottom: 10px;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],d=o.base?s[0]+o.base:s[0],A=a[d]||0,l="".concat(d," ").concat(A);a[d]=A+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,o);o.byIndex=c,e.splice(c,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=o(n,r),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e);var o={};(()=>{t.d(o,{j:()=>E});class n{constructor(n,e,t){this.description=n,this.completed=e,this.index=t}listCode(){return`<li data-id="${this.index}"><div id="${this.index}" class="task"><input class="check-box list-${this.index}" type="checkbox"><p contenteditable="true" class="edit">${this.description}</p></div>\n      <div><i class="fas fa-trash-alt icon-d"></i> <i class="fas fa-ellipsis-v icons"></i></div>`}static addTo(n){E.push(n),localStorage.setItem("ToDo",JSON.stringify(E))}static remove(n){E=E.filter((e=>e.index!==Number(n)));for(let n=0;n<E.length;n+=1)E[n].index=n+1;localStorage.setItem("ToDo",JSON.stringify(E))}}var e=t(379),r=t.n(e),a=t(795),i=t.n(a),c=t(569),s=t.n(c),d=t(565),A=t.n(d),l=t(216),p=t.n(l),u=t(589),f=t.n(u),m=t(426),b={};b.styleTagTransform=f(),b.setAttributes=A(),b.insert=s().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=p(),r()(m.Z,b),m.Z&&m.Z.locals&&m.Z.locals;let E=JSON.parse(localStorage.getItem("ToDo"))||[];const x=document.createElement("div");x.className="container";const g=document.createElement("p");g.className="heading",g.textContent="Today's To Do";const C=document.createElement("span");C.innerHTML='<i class="fas fa-sync-alt icons iconed"></i>',g.append(C),x.append(g);const h=document.createElement("div");h.className="contain";const v=document.createElement("div");v.className="input";const y=document.createElement("input");y.placeholder="Add to your list...",y.type="text",y.className="text";const B=document.createElement("div");B.innerHTML='<i class="fas fa-stream sub-icon"></i>',h.append(v),h.append(B),v.append(y),x.append(h);const k=document.createElement("button");k.type="button",k.className="clear-all",k.textContent="Clear all completed",document.body.insertAdjacentElement("afterbegin",x);const S=document.createElement("button");S.className="save",S.textContent="Save edits";const w=document.querySelector(".list");function T(){const e=E.map((e=>new n(e.description,e.completed,e.index).listCode()));w.innerHTML=e.join("");document.querySelectorAll(".check-box").forEach((n=>{n.addEventListener("change",(n=>{!function(n,e){if(n){e.classList.add("strike");const n=e.getAttribute("id");for(let e=0;e<E.length;e+=1)E[e].index=e+1,Number(n)===E[e].index&&(E[e].completed=!0,localStorage.setItem("ToDo",JSON.stringify(E)))}else{e.classList.remove("strike");const n=e.getAttribute("id");for(let e=0;e<E.length;e+=1)Number(n)===E[e].index&&(E[e].completed=!1,localStorage.setItem("ToDo",JSON.stringify(E)))}}(n.target.checked,n.target.parentElement)}))})),document.querySelectorAll(".icon-d").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target.parentElement.parentElement.getAttribute("data-id");n.remove(t),T()}))}))}x.append(w),x.append(k),x.append(S),T(),document.addEventListener("DOMContentLoaded",(()=>{document.querySelector(".sub-icon").addEventListener("click",(()=>{const e=document.querySelector(".text"),t=e.value.trim();if(!t)return;let o=0;0===E.length?o=E.length+1:E.length>0&&(o=E[E.length-1].index+1);const r=new n(t,!1,o);n.addTo(r),T(),e.value=""})),document.querySelector(".clear-all").addEventListener("click",(()=>{E=E.filter((n=>!1===n.completed)),T();for(let n=0;n<E.length;n+=1)E[n].index=n+1;localStorage.setItem("ToDo",JSON.stringify(E))})),document.querySelectorAll(".check-box").forEach((n=>{for(let e=0;e<E.length;e+=1)if(!0===E[e].completed){const t=n.parentElement.getAttribute("id");Number(t)===E[e].index&&(n.parentElement.classList.add("strike"),n.checked=!0)}}));const e=document.querySelector(".save");document.querySelectorAll(".edit").forEach((n=>{n.addEventListener("click",(()=>{e.addEventListener("click",(()=>{const e=n.innerHTML;for(let t=0;t<E.length;t+=1){const o=n.parentElement.getAttribute("id");Number(o)===E[t].index&&(E[t].description=e)}}))}))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,